1.1
	1. emacs exer1.html
	2. C-s "HTML" ENTER
	3. C-s "scavenger" ENTER M-b
	4. C-s "self-referential" Enter M-b M-b
	5. C-s "arrow" ENTER M-b
	6. C-e
	7. C-a
	8. Did the above with emacs commands...
	9. Ha, I'm not some basic ho...
	10. As shown above (there are also other ways to do so, but the above commands are the ones I found)
	11. C-x C-s (if wanting to save though no changes were made this time), otherwise C-x C-c
1.2
	1. emacs exer2.html
	2. M-g-g 18 ENTER C-u 2 C-k
	3. C-s "<!--" ENTER C-a C-k
	4. C-s "<!--" C-a C-u 3 C-k
	5. C-s "<!" C-b C-b M-z > (repeat till full comment is deleted) 
	6. C-x C-s C-x C-c
	7. diff -u exer1.html exer2.html >exer2.diff
1.3 
	1. emacs exer3.html
	2. M-% "Assignment 1" ENTER "Assignment 42" ENTER y y C-g
	3. M-< M-% "UTF-8" ENTER "US-ASCII" ENTER y C-g
	4. M-< C-s "[^"" C-a C-s "[^"" C-a 
	5. M-< C-s "<ol>" ENTER ENTER 
	C-x C-s ENTER C-x C-c
1.4 (Double Check)
	 1. cat exer2.html exer2.diff >exer4.html
	 2. emacs exer4.html Enter 
	 3,4.
	 M-> C-r <! Enter C-SP C-e M-w M-g g 373 C-y Enter 
   	 M-> C-r C-r<! Enter C-SP C-e C-u 3 C-n M-w M-g g 359 Enter C-y Enter 
     M-> C-r C-r C-r <! Enter C-SP C-u 7 C-f M-w M-g g 358 Enter C-e C-u 5 C-b C-y
     M-> C-r C-r C-r C-r <! Enter C-SP C-e C-u 2 C-n M-w M-g g 323 Enter C-y 
     M-> C-r C-r C-r C-r C-r <! Enter C-SP C-e M-w M-g g Enter 113 Enter C-y 
     M-> C-r C-r C-r C-r C-r C-r <! Enter C-SP C-e M-w M-g g 18 Enter C-y    
     5. M-> C-r --- C-r C-r C-SP M-> C-w
     6. C-x u 
     (?)7. - - > C-r - - - C-r C-r Enter <! -  - Enter
     8. C-s <ol> M-% <oL> y y y y y y y (7 occurrences)
     9. diff -u exer1.html exer4.html >exer4.diff
1.5
	open emacs
	1. M-x make-directory ENTER ~/junk ENTER
	2. C-x DELETE ALL "~junk" 
	C-x C-f junk/hello.c ENTER
	3. M-x compile "gcc hello.c"
	4. C-x-b (creating new emacs buffer) hello-out
	   C-u M-! ./a.out (C-u specifies correct print location, based on testing)
	5. C-SPACE M-> M-w C-x C-f BACKSPACE BACKSPACE "CS35L/key1.txt" ENTER M-> C-y
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

1.6
	1. C-x-b ENTER (b/c default is scratch)
	2. "(random)" C-j
	3.
	"(setq x (random))" C-j
	-2096984720402916907
	"(setq y (random))" C-j
	-1535250974468317488
	"(setq z (random))" C-j
	-567572964598245087
	4. -2266083313251375856 ; This is the wrong answer, which seems to imply that there is some sort of overflow issue
	5. -2266083313251375856 (#o202152023563215422420, #x208d413b9a362510 ; This is the same answer but with octa and hexadecimal values
	6. Not technically, since computers limited memory and therefore are limited to a certain range (ie signed ints are from -2^(31) -1 to 2^(31) -1). Additionally, the random numbers are actually psuedo-random numbers, and are generated from a number seed value that is created on start up. Thus they mimic random patterns, but when given the same initial starting number seed the random values will be the same.
