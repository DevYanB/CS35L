Ensure correct encoding with: export LC_ALL='C'

#=========================================================================================================================
Try out the first few commands with correct pipelining
#=========================================================================================================================

tr -c 'A-Za-z' '[\n*]' < hwn.html
- gets all words/characters and includes the spacing and new lines between the words

tr -cs 'A-Za-z' '[\n*]' < hwn.html
- gets all words and removes extra spaces/newlines between words, unline previous command that includes the spacing between words the original html has b/t them

tr -cs 'A-Za-z' '[\n*]' < hwn.html | sort 
- returns the same words as the previous command but puts them in alphabetical order

tr -cs 'A-Za-z' '[\n*]' < hwn.html | sort -u
- returns the same as the previous command but removes repeat words/characters

tr -cs 'A-Za-z' '[\n*]' < hwn.html | sort -u | comm - words
	- compares all the sorted words in file 1 with those in words, file 2, and prints the words unique to 1 in one column, the ones unique to 2 in another column, and common words in column three to the terminal

tr -cs 'A-Za-z' '[\n*]' < hwn.html | sort -u | comm -23 - words
	- prints the words unique to file 1 instead of those shared by both and unique to file 2.

#=========================================================================================================================
Lab Portion: buildwords script
#=========================================================================================================================

wget http://mauimapp.com/moolelo/hwnwdseng.htm

Description of each line (in the actual process I went step by step and checked the input, and so I will descript as such!)

0. #! /bin/bash
- Tell the interpreter which subshell system to use while parsing through our script

1. grep -E "<td>.+</td>"
- This line esseintially grabs all the words/strings in between the <td> and </td> tags
- What ".+" does is matches any character(.), and then matches one or more of the previous character(+). Since the previous character is any character, this effectively gets all the lines with all possible characters between the <td></td> tags. Note that a * could have been used instad of +, but that would also include empty tags, ie <td></td>, which is unecessary.

2. sed "1~2d"
- This line essentially removes the english words in the list
- The expression in quotes esseintially specifies that starting at and including line 1, and for every othhr line (~2), to delete those specified lines till the end of the file(d)

3. sed "s/<[^>]*>//g"
- This command removes all of the html tags
- The way it works is that it is a replace expression (s/), and it takes all chars from the < tag to the > tag (<[^>]*>) and relaces them with nothing (//). The g tag applies this to all lines (globally)

4. tr [:upper:] [:lower:]
- This command translates all uppercase characters to their lowercase equivalent

5. tr "\`" "\'" 
- This command replaces all ` with ' so that it is syntactically correct as the Hawaiian 'okina
- This translates/replaces the ` with ', and the backslash is needed to turn off the special meaning of the characters

6. sed '/^\s*$/d'
- This command removes(d flag at the end) all the leading whitespace in the file

7. sed -E "s/,\s|\s/\n/g"
- This command replaces all commas and spaces with the newline character. The /s symbol indicates different chars to replace, | is the pipeline / or.

8. grep "^[pk\' mnwlhaeiou]\{1,\}$"
- Grabs any organization of the valid hawaiian characters and symbols and disregards any of the other symbols

9. sort -u
- Sorts in alphabetical order and then prints out the unique strings

10. sed '/^$/d'
- Remove all empty lines

For execution:
$ chmod u+x buildwords

$ ./buildwords < hwnwdseng.htm > hwords


