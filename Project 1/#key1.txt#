1.1
	1. emacs exer1.html
	2. C-s "UTF-8"
	3. C-s "Instructions" (C-s again to get to second instance of "Instructions")
	4. M-< C-s "HTML" M-b C-f
	5. C-s "arrow" M-b
	6. C-e
	7. C-a
	8. M-< or M-g-g 1 ENTER
	9. Ha, I'm not some basic ho...
	10. As shown above (there are also other ways to do so, but the above commands are the ones I found)
	11. C-x C-s (if wanting to save though no changes were made this time), otherwise C-x C-c
1.2
	1. emacs exer2.html
	2. M-g-g 18 ENTER C-u 2 C-k
	3. C-s "<!" C-a C-k
	4. C-s "<!" C-a C-u 3 C-k
	5. C-s "<!" C-b C-b M-z >
	C-x C-s C-x C-c
1.3 
	1. emacs exer3.html
	2. M-% "Assignment 1" ENTER "Assignment 37" ENTER y y C-g (dont really need C-g, but exits out of search)
	3. M-< M-% "UTF-8" ENTER "US-ASCII" ENTER y C-g (dont really need C-g, but exits out of search)
	4. M-< C-s "<ol>" ENTER ENTER 
	C-x C-s ENTER C-x C-c
1.4
	1. M-> C-r - < RIGHT C-SP C-e M-w M-g M-g 337 C-y C-k
	2. M-> C-r - < C-r RIGHT C-SP DOWN DOWN DOWN M-w M-g M-g 298 DOWN DOWN DOWN C-y Enter UP C-d UP C-d
	3. M-> M-r C-r - < RIGHT C-SP C-e M-w M-g M-g 91 DOWN DOWN DOWN C-y
	4. M-> M-r C-r - < C-r RIGHT C-SP C-e M-w M-g M-g 15 DOWN DOWN DOWN C-y
	5. M-> C-r - - - C-SP M-> C-w
	6. C-x-u
	7. C-r < / h t m C-e C-o DOWN < ! - - M-> - - >
	8. M-< M-x r e p l a c e - s t r i n g < o l > Enter < O l > Enter
	C-x C-c y
	9. d i f f SP - u SP e x e r 1 . h t m l SP e x e r 4 . h t m l SP > e x e r 4 . d i f f
1.5
	1. M-x make-directory ENTER junk ENTER
	2. C-x C-f junk/hello.c ENTER
	3. M-x compile "gcc hello.c"
	4. C-x-b (creating new emacs buffer) hello-out
	   C-u M-! ./a.out (C-u specifies correct print location, based on testing)
	5. C-SPACE M-> M-w 
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}
